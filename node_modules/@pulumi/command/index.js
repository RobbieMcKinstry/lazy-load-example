"use strict";

function greeting() {    
    const prefix = "/Users/robbiemckinstry/workspace/pulumi/lazy-loading/tracing-loads"
    const module_filename = module.filename.replace(prefix, "");
    console.log("Executing", module_filename);
}

greeting();

// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.types = exports.remote = exports.local = void 0;
// Here, we eagerly load these tools because we use them later
// in this file to speak with the language host.
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
// Export members:
__exportStar(require("./provider"), exports);
// Export sub-modules:
function lazy_load(exports, module_name) {
  Object.defineProperty(exports, module_name, {
    enumerable: true,
    get: function() {
        return require(`./${module_name}`);
    },
  });
}

function lazy_load_all(args) {
    args.forEach(arg => lazy_load(exports, arg));
}

const imports = ["local", "remote", "types"];
lazy_load_all(imports);

const provider_1 = require("./provider");
pulumi.runtime.registerResourcePackage("command", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:command") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new provider_1.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map